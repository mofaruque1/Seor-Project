package com.omor.digital.base.api;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import com.amazonaws.serverless.exceptions.ContainerInitializationException;
import com.amazonaws.serverless.proxy.model.AwsProxyRequest;
import com.amazonaws.serverless.proxy.model.AwsProxyResponse;
import com.amazonaws.serverless.proxy.spark.SparkLambdaContainerHandler;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestStreamHandler;

import spark.Spark;

import static spark.Spark.before;
import static spark.Spark.get;

public class RequestStreamLambdaHandler implements RequestStreamHandler {

	private static SparkLambdaContainerHandler<AwsProxyRequest, AwsProxyResponse> handler;
	private boolean isInitialized = false;

	@Override
	public void handleRequest(InputStream input, OutputStream output, Context context) throws IOException {

		if (!isInitialized) {
			isInitialized = true;
			try {
				System.out.println("\033[0;32m" + "INFO : Initialization" + "\033[0m");
				handler = SparkLambdaContainerHandler.getAwsProxyHandler();
				defineBaseResources();
				Spark.awaitInitialization();
			} catch (ContainerInitializationException e) {

				System.out.println("ERROR : Container initialization exception");
				return;
			}

		}

		handler.proxyStream(input, output, context);
	}

//	public void defineBaseResources() {
//		System.out.println("INFO : Defining base spark resources");
//
//	}

	public static void defineBaseResources() {
		before("/*", (req, res) -> {
			res.type("application/json");
			res.header("access-control-allow-headers",
					"Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token");
			res.header("access-control-allow-methods", "POST,GET,PUT,DELETE,OPTIONS");
			res.header("access-control-allow-origin", "*");
		});

		get("/urlone", (req, res) -> {
			res.status(200);
			return "{ \"color\" : \"Black\", \"type\" : \"BMWWWWWWW\" }";
		});

	}

}
