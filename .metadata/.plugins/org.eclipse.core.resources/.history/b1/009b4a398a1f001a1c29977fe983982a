package com.omor.digital.base.api;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.amazonaws.serverless.exceptions.ContainerInitializationException;
import com.amazonaws.serverless.proxy.model.AwsProxyRequest;
import com.amazonaws.serverless.proxy.model.AwsProxyResponse;
import com.amazonaws.serverless.proxy.spark.SparkLambdaContainerHandler;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestStreamHandler;

import spark.Spark;

import static spark.Spark.before;
import static spark.Spark.get;

public class RequestStreamLambdaHandler implements RequestStreamHandler {

	private static SparkLambdaContainerHandler<AwsProxyRequest, AwsProxyResponse> handler;
	private static Logger logger = LoggerFactory.getLogger(RequestStreamLambdaHandler.class);
	private boolean isInitialized = false;

	@Override
	public void handleRequest(InputStream input, OutputStream output, Context context) throws IOException {

		if (!isInitialized) {
			isInitialized = true;
			try {
				logger.info("Initializing");
				handler = SparkLambdaContainerHandler.getAwsProxyHandler();
				defineBaseResources();
				Spark.awaitInitialization();
			} catch (ContainerInitializationException e) {
				logger.error("ERROR : Container initialization exception");
				return;
			}

		}

		handler.proxyStream(input, output, context);
	}

	public void defineBaseResources() {
		logger.info("Defining base spark resources");

	}

}
